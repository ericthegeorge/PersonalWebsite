To map your navigation items (like "About", "Skills", etc.) to their respective components in React, you can use React Router. This will allow you to handle routing between different components in your application. Here's how to set it up step-by-step:

### 1. Install React Router
First, if you haven't already, install `react-router-dom`:

```bash
npm install react-router-dom
```

### 2. Set Up Your Components
Ensure you have separate components for "About", "Skills", etc. For example:

```jsx
// About.js
import React from 'react';

const About = () => {
  return <div>About Section</div>;
};

export default About;

// Skills.js
import React from 'react';

const Skills = () => {
  return <div>Skills Section</div>;
};

export default Skills;

// Similarly create other components like PersonalProjects, Contact, etc.
```

### 3. Set Up the Router in Your Main App Component
In your main component (e.g., `App.js`), wrap your components with a `BrowserRouter` and define your routes.

```jsx
// App.js
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import NavBar from './NavBar';
import About from './About';
import Skills from './Skills';
// Import other components here

function App() {
  return (
    <Router>
      <NavBar />
      <Routes>
        <Route path="/about" element={<About />} />
        <Route path="/skills" element={<Skills />} />
        {/* Add other routes here */}
        <Route path="/personal-projects" element={<PersonalProjects />} />
        <Route path="/contact" element={<Contact />} />
      </Routes>
    </Router>
  );
}

export default App;
```

### 4. Update Your NavBar Component
Modify the `NavBar` component to use `Link` from `react-router-dom` instead of using buttons or `MenuItem` without links.

```jsx
import { Link } from 'react-router-dom';

// Inside NavBar component
return (
  <AppBar position="static" sx={{ backgroundColor: "#130426" }}>
    <Container maxWidth="xl">
      <Toolbar disableGutters sx={{ display: "flex", alignItems: "center" }}>
        {/* Other components like logo */}
        <Box sx={{ flexGrow: 1, display: { xs: "none", md: "flex", justifyContent: "center" } }}>
          {pages.map((page) => (
            <Button
              key={page}
              component={Link}
              to={`/${page.toLowerCase().replace(" ", "-")}`} // Create a link based on the page name
              onClick={handleCloseNavMenu}
              sx={{ my: "1.3rem", color: "white", display: "block" }}
            >
              {page}
            </Button>
          ))}
        </Box>
      </Toolbar>
    </Container>
  </AppBar>
);
```

### 5. Finalize Your Routes
Make sure your routes correspond to the URLs generated by the buttons. For example, "About" should route to `/about`, "Skills" to `/skills`, etc.

### Summary
By using `react-router-dom`, you can effectively manage navigation between different components in your React app. The steps above will set up a basic routing system, allowing users to navigate to "About", "Skills", and other sections through your navigation bar.